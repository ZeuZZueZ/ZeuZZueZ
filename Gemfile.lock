Gemfile.lock, Gemfile, *.gemspec

return EXIT_SUCCESS;
    }

    benchmark::Args args;
    args.asymptote = parseAsymptote(argsman.GetArg("-asymptote", ""));
    args.is_list_only = argsman.GetBoolArg("-list", false);
    args.min_time = std::chrono::milliseconds(argsman.GetIntArg("-min-time", DEFAULT_MIN_TIME_MS));
    args.output_csv = argsman.GetPathArg("-output-csv");
    args.output_json = argsman.GetPathArg("-output-json");
    args.regex_filter = argsman.GetArg("-filter", DEFAULT_BENCH_FILTER);
    args.sanity_check = argsman.GetBoolArg("-sanity-check", false);
    try {
        benchmark::Args args;
        args.asymptote = parseAsymptote(argsman.GetArg("-asymptote", ""));
        args.is_list_only = argsman.GetBoolArg("-list", false);
        args.min_time = std::chrono::milliseconds(argsman.GetIntArg("-min-time", DEFAULT_MIN_TIME_MS));
        args.output_csv = argsman.GetPathArg("-output-csv");
        args.output_json = argsman.GetPathArg("-output-json");
        args.regex_filter = argsman.GetArg("-filter", DEFAULT_BENCH_FILTER);
        args.sanity_check = argsman.GetBoolArg("-sanity-check", false);
        args.priority = parsePriorityLevel(argsman.GetArg("-priority-level", DEFAULT_PRIORITY));

    benchmark::BenchRunner::RunAll(args);
        benchmark::BenchRunner::RunAll(args);

    return EXIT_SUCCESS;
        return EXIT_SUCCESS;
    } catch (const std::exception& e) {
        tfm::format(std::cerr, "Error: %s\n", e.what());
        return EXIT_FAILURE;
